import streamlit as st
from config import style
import pandas as pd
from modules.module_predict import appliquer_modele, charger_modele_externe, saisir_donnees_manuellement, import_fichier

# Style adaptatif pour le mode clair/sombre
st.markdown(style, unsafe_allow_html=True)

# En-t√™te principal
st.markdown("""
    <div class="main-header">
        <h1>üîÆ Pr√©dictions</h1>
        <p style="font-size: 1.2em; margin-top: 1rem;">
            Importez ou saisissez vos nouvelles donn√©es pour obtenir des pr√©dictions √† l'aide du mod√®le entra√Æn√©
        </p>
    </div>
    """, unsafe_allow_html=True)



# Chargement du mod√®le
st.subheader("üì¶ Mod√®le √† utiliser")
choix_modele = st.radio(
    "Souhaitez-vous utiliser le mod√®le d√©j√† entra√Æn√© ou en importer un autre ?", 
    ["Mod√®le en m√©moire", "Importer un fichier .pkl"]
)

modele = None

if choix_modele == "Mod√®le en m√©moire":
    modele = st.session_state.get("modele_final")
    if modele:
        st.success("‚úÖ Mod√®le r√©cup√©r√© depuis la session")
    else:
        st.warning("‚ùå Aucun mod√®le trouv√© dans la session")

elif choix_modele == "Importer un fichier .pkl":
    fichier_pkl = st.file_uploader("Importer un mod√®le .pkl", type=["pkl"])
    if fichier_pkl:
        modele = charger_modele_externe(fichier_pkl)
        st.session_state["modele_final"] = modele
        st.success("‚úÖ Mod√®le import√© avec succ√®s")

if not modele:
    st.warning("‚ùå Aucun mod√®le disponible. Entra√Ænez ou importez un mod√®le pour continuer.")
    st.stop()
    

# Choix de la m√©thode d'entr√©e
st.subheader("üßæ M√©thode d'entr√©e des donn√©es")
methode = st.radio(
    "Comment souhaitez-vous fournir les donn√©es √† pr√©dire ?", 
    ["Fichier CSV ou XLSX", "Saisie manuelle"]
)

# CSV ou XLSX
if methode == "Fichier CSV ou XLSX":
    df_new = import_fichier()
    # uploaded_file = st.file_uploader("Uploader un fichier CSV avec les m√™mes colonnes que le mod√®le (hors cible)", type="csv")

    # if uploaded_file is not None:
    #     df_new = pd.read_csv(uploaded_file)
        # st.write("Aper√ßu des donn√©es import√©es :")
        # st.dataframe(df_new.head())

    if st.button("‚ö° Appliquer le mod√®le pour pr√©dire", key="predict_csv"):
        df_new = st.session_state.get("df_new", None)
        if df_new is not None:
            try:
                df_resultats = appliquer_modele(modele, df_new)
                st.success("‚úÖ Pr√©dictions effectu√©es avec succ√®s")
                st.dataframe(df_resultats.head())

                csv = df_resultats.to_csv(index=False).encode("utf-8")
                st.download_button("‚¨áÔ∏è T√©l√©charger les pr√©dictions", data=csv, file_name="predictions.csv", mime="text/csv")
            except Exception as e:
                st.error(f"‚ùå Erreur lors de l'application du mod√®le : {e}")
    else:
        st.warning("Veuillez d'abord importer un fichier avant de lancer la pr√©diction.")

# Saisie manuelle
elif methode == "Saisie manuelle":
    if "X_train" in st.session_state:
        X_train = st.session_state["X_train"]
        colonnes = X_train.columns.tolist()
                
        df_input = saisir_donnees_manuellement(colonnes)

        if st.button("‚ö° Pr√©dire", key="predict_form"):
            try:
                df_resultats = appliquer_modele(modele, df_input)
                st.success("‚úÖ Pr√©diction effectu√©e :")
                st.dataframe(df_resultats)
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la pr√©diction : {e}")
    else:
        st.warning("‚ùó Pour la saisie manuelle, les colonnes attendues doivent √™tre disponibles dans X_train.")
